package org.mulesoft.custom.logging;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.param.Default;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.apache.commons.lang3.StringUtils;

@Connector(name="logging-connector", friendlyName="Logging Connector")
public class LoggingConnector {

    @Processor
    public void logMessage(
        @Default("INFO") String logLevel,
        @Default("Com.finastra.info.default") String logCategory,
        String correlationId,
        String message,
        @Optional String source,
        @Optional String target,
        String interfaceName,
        @Optional String flowName,
        String uniqueId,
        @Optional Object payload,
        @Optional String maskedFields) {

        // Configure logger dynamically
        Logger logger = LoggerFactory.getLogger(logCategory);

        // Ensure the logger is enabled in runtime manager or log4j before logging
        if (!isLoggingEnabled(logLevel, logCategory)) {
            return;
        }

        // Create a JSON object for structured logging
        JSONObject logObject = new JSONObject();
        logObject.put("correlationId", correlationId);
        logObject.put("message", message);
        logObject.put("interfaceName", interfaceName);
        logObject.put("logLevel", logLevel);
        logObject.put("logCategory", logCategory);
        logObject.put("uniqueId", uniqueId);

        // Conditional Fields
        if (logLevel.equalsIgnoreCase("ERROR")) {
            logObject.put("source", source);
            logObject.put("target", target);
            logObject.put("flowName", flowName);
            logObject.put("errorPayload", "error payload:");
        }
        
        if (logLevel.equalsIgnoreCase("INFO") || logLevel.equalsIgnoreCase("DEBUG")) {
            if (payload != null) {
                if (isXmlPayload(payload)) {
                    logObject.put("payload", payload.toString()); // Maintain XML structure
                } else {
                    logObject.put("payload", maskSensitiveData(payload.toString(), maskedFields));
                }
            }
        }

        // Log message in the appropriate level
        switch (logLevel.toUpperCase()) {
            case "DEBUG":
                logger.debug(logObject.toString(2));
                break;
            case "INFO":
                logger.info(logObject.toString(2));
                break;
            case "WARN":
                logger.warn(logObject.toString(2));
                break;
            case "ERROR":
                logger.error(logObject.toString(2));
                break;
            default:
                logger.info("Invalid log level provided. Defaulting to INFO: " + logObject.toString(2));
        }
    }

    // Check if logging is enabled for the given log level & category
    private boolean isLoggingEnabled(String logLevel, String logCategory) {
        Logger logger = LoggerFactory.getLogger(logCategory);
        switch (logLevel.toUpperCase()) {
            case "DEBUG": return logger.isDebugEnabled();
            case "INFO": return logger.isInfoEnabled();
            case "WARN": return logger.isWarnEnabled();
            case "ERROR": return logger.isErrorEnabled();
            default: return false;
        }
    }

    // Check if payload is XML
    private boolean isXmlPayload(Object payload) {
        String payloadString = payload.toString().trim();
        return payloadString.startsWith("<") && payloadString.endsWith(">");
    }

    // Mask sensitive fields from payload
    private String maskSensitiveData(String payload, String maskedFields) {
        if (StringUtils.isNotBlank(maskedFields)) {
            for (String field : maskedFields.split(",")) {
                payload = payload.replaceAll("(?i)<" + field + ">.*?</" + field + ">", "<" + field + ">****</" + field + ">");
            }
        }
        return payload;
    }
}
